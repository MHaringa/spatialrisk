if ( nrows1 !=  nrows2 ){
warning("NAs detected in ", value_nm, ". Rows with NAs removed.", call. = FALSE)
}
# Add geohash (length 5 is 4.89km x 4.89km; length 6 is 1.22 x 0.61km; length 7 is 153m x 153m; length 8 is 38m x 19m)
df[["geohash"]] <- geohashTools::gh_encode(latitude = df[[lat_nm]],
longitude = df[[lon_nm]],
precision = gh_precision)
# Determine lower bound for concentration (based on circles around 1000 highest sums insured)
# This only works with some relatively high sums insured
if ( is.null(lowerbound) ){
lowerbound_1 <- lower_bound_fn(df, value_nm,
lat_nm = lat_nm,
lon_nm = lon_nm,
radius = radius,
highest = 1000)
}
portfolio_dt <- data.table::data.table(df)
# Calculate total sum insured per geohash
gh_sum <- portfolio_dt[, .(gh_self_sum = sum(get(value_nm))), by = geohash]
# Determine 8 neighbors of geohash and calculate total sum insured for the 9 geohashes
gh_sum_nghbrs <- add_gh_nghbrs_sum(gh_sum, "gh_self_sum")
# Find lowerbound for use cases where sum insured is same for all coords
lowerbound_2 <- lower_bound_fn2(gh_sum_nghbrs,
full = portfolio_dt,
col = value_nm,
lat_nm = lat_nm,
lon_nm = lon_nm,
radius = radius)
# Take max of both lowerbounds
lowerbound <- max(lowerbound_1, lowerbound_2)
# Remove geohashes with a total sum insured lower than the lower bound
gh_remaining <- gh_sum_nghbrs[gh_nghbrs_sum >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining <- portfolio_dt[geohash %in% gh_remaining$geohash]
names(pts_remaining)[names(pts_remaining) == value_nm] <- "_sum_insured"
# Determine centre point for each remaining geohash (delta is distance to bound)
gh_center_lst <- geohashTools::gh_decode(gh_remaining$geohash,
include_delta = TRUE)
gh_center <- data.table::as.data.table(gh_center_lst)
# Determine sum of remaining points within bounding box of radius
# around remaining geohashes
bbox_sum <- add_gh_bbox_sum(gh_center,
pts_remaining,
lon_nm = lon_nm,
lat_nm = lat_nm,
radius = radius)
gh_sum_bbox <- cbind(gh_remaining, bbox_sum)
# Remove (again) geohashes with a total sum insured lower than the lower bound
gh_remaining_bbox <- gh_sum_bbox[sum_bbox >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining2 <- portfolio_dt[geohash %in% gh_remaining_bbox$geohash]
# Create grid points in remaining geohashes
gh_grid <- create_grid_points(gh_remaining_bbox, meters = grid_distance)
# Concentration for each grid point
names(pts_remaining)[names(pts_remaining) == lat_nm] <- "lat"
names(pts_remaining)[names(pts_remaining) == lon_nm] <- "lon"
names(pts_remaining2)[names(pts_remaining2) == lat_nm] <- "lat"
names(pts_remaining2)[names(pts_remaining2) == lon_nm] <- "lon"
gh_grid_conc <- concentration(gh_grid,
pts_remaining,
value = `_sum_insured`,
radius = radius,
display_progress = display_progress)
gh_grid_conc_sort <- gh_grid_conc[order(-concentration)]
data.table::setcolorder(gh_grid_conc_sort, c("concentration", "lon", "lat", "geohash"))
attr(gh_grid_conc_sort, "value_nm") <- value_nm
attr(gh_grid_conc_sort, "pts_remaining") <- pts_remaining2
attr(gh_grid_conc_sort, "gh_remaining") <- gh_remaining_bbox
attr(gh_grid_conc_sort, "radius") <- radius
class(gh_grid_conc_sort) <- append("concentration", class(gh_grid_conc_sort))
return(gh_grid_conc_sort)
}
# Find highest concentration with a precision of a grid of 20 meters
hc1 <- highest_concentration(Groningen, amount, radius = 200, grid_distance = 40, lat = lat, lon = lon)
hc2 <- highest_concentration(Groningen1, amount, radius = 200, grid_distance = 40, lat = lat1, lon = lon1)
hc1
hc2
nrow(mtcars)
devtools::document()
?highest_concentration
devtools::document()
?highest_concentration
devtools::document()
?highest_concentration
devtools::document()
?highest_concentration
highest_concentration(Groningen)
devtools::document()
highest_concentration(Groningen)
#'
#' # Create map with geohashes above the lowerbound
#' # The highest concentration lies in one of the geohashes
#' plot(hc1)
#'
#' # Create map with highest concentration
#' plot(hc1_nghb)
#' }
#'
#' @export
highest_concentration <- function(df, value, lon = lon, lat = lat,
lowerbound = NULL, radius = 200,
grid_distance = 20, gh_precision = 6,
display_progress = TRUE){
value_nm <- deparse(substitute(value))
lon_nm <- deparse(substitute(lon))
lat_nm <- deparse(substitute(lat))
df_nm <- deparse(substitute(df))
if ( !all(c(value_nm) %in% names(df))) {
stop(df_nm, " does not contain columns ", value_nm,
". Specify with arguments `value`.", call. = FALSE)
}
if ( !all(c(lon_nm, lat_nm) %in% names(df))) {
stop(df_nm, " does not contain columns ", lon_nm, " and ", lat_nm,
". Specify with arguments `lon` and `lat`.", call. = FALSE)
}
nrows1 <- nrow(df)
# Remove rows with NA values
df <- df[!is.na(df[[value_nm]]), ]
if ( nrows1 !=  nrow(df) ){
warning(nrows1 - nrow(df), " NAs detected in ", value_nm, ". Rows with NAs removed.", call. = FALSE)
}
# Add geohash (length 5 is 4.89km x 4.89km; length 6 is 1.22 x 0.61km; length 7 is 153m x 153m; length 8 is 38m x 19m)
df[["geohash"]] <- geohashTools::gh_encode(latitude = df[[lat_nm]],
longitude = df[[lon_nm]],
precision = gh_precision)
# Determine lower bound for concentration (based on circles around 1000 highest sums insured)
# This only works with some relatively high sums insured
if ( is.null(lowerbound) ){
lowerbound_1 <- lower_bound_fn(df, value_nm,
lat_nm = lat_nm,
lon_nm = lon_nm,
radius = radius,
highest = 1000)
}
portfolio_dt <- data.table::data.table(df)
# Calculate total sum insured per geohash
gh_sum <- portfolio_dt[, .(gh_self_sum = sum(get(value_nm))), by = geohash]
# Determine 8 neighbors of geohash and calculate total sum insured for the 9 geohashes
gh_sum_nghbrs <- add_gh_nghbrs_sum(gh_sum, "gh_self_sum")
# Find lowerbound for use cases where sum insured is same for all coords
lowerbound_2 <- lower_bound_fn2(gh_sum_nghbrs,
full = portfolio_dt,
col = value_nm,
lat_nm = lat_nm,
lon_nm = lon_nm,
radius = radius)
# Take max of both lowerbounds
lowerbound <- max(lowerbound_1, lowerbound_2)
# Remove geohashes with a total sum insured lower than the lower bound
gh_remaining <- gh_sum_nghbrs[gh_nghbrs_sum >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining <- portfolio_dt[geohash %in% gh_remaining$geohash]
names(pts_remaining)[names(pts_remaining) == value_nm] <- "_sum_insured"
# Determine centre point for each remaining geohash (delta is distance to bound)
gh_center_lst <- geohashTools::gh_decode(gh_remaining$geohash,
include_delta = TRUE)
gh_center <- data.table::as.data.table(gh_center_lst)
# Determine sum of remaining points within bounding box of radius
# around remaining geohashes
bbox_sum <- add_gh_bbox_sum(gh_center,
pts_remaining,
lon_nm = lon_nm,
lat_nm = lat_nm,
radius = radius)
gh_sum_bbox <- cbind(gh_remaining, bbox_sum)
# Remove (again) geohashes with a total sum insured lower than the lower bound
gh_remaining_bbox <- gh_sum_bbox[sum_bbox >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining2 <- portfolio_dt[geohash %in% gh_remaining_bbox$geohash]
# Create grid points in remaining geohashes
gh_grid <- create_grid_points(gh_remaining_bbox, meters = grid_distance)
# Concentration for each grid point
names(pts_remaining)[names(pts_remaining) == lat_nm] <- "lat"
names(pts_remaining)[names(pts_remaining) == lon_nm] <- "lon"
names(pts_remaining2)[names(pts_remaining2) == lat_nm] <- "lat"
names(pts_remaining2)[names(pts_remaining2) == lon_nm] <- "lon"
gh_grid_conc <- concentration(gh_grid,
pts_remaining,
value = `_sum_insured`,
radius = radius,
display_progress = display_progress)
gh_grid_conc_sort <- gh_grid_conc[order(-concentration)]
data.table::setcolorder(gh_grid_conc_sort, c("concentration", "lon", "lat", "geohash"))
attr(gh_grid_conc_sort, "value_nm") <- value_nm
attr(gh_grid_conc_sort, "pts_remaining") <- pts_remaining2
attr(gh_grid_conc_sort, "gh_remaining") <- gh_remaining_bbox
attr(gh_grid_conc_sort, "radius") <- radius
class(gh_grid_conc_sort) <- append("concentration", class(gh_grid_conc_sort))
return(gh_grid_conc_sort)
}
highest_concentration(Groningen)
devtools::document()
#'
#' # Create map with geohashes above the lowerbound
#' # The highest concentration lies in one of the geohashes
#' plot(hc1)
#'
#' # Create map with highest concentration
#' plot(hc1_nghb)
#' }
#'
#' @export
highest_concentration <- function(df, value, lon = lon, lat = lat,
lowerbound = NULL, radius = 200,
grid_distance = 20, gh_precision = 6,
display_progress = TRUE){
value_nm <- deparse(substitute(value))
lon_nm <- deparse(substitute(lon))
lat_nm <- deparse(substitute(lat))
df_nm <- deparse(substitute(df))
if ( !all(c(value_nm) %in% names(df))) {
stop(df_nm, " does not contain column specified in value.
Specify with argument `value`.", call. = FALSE)
}
if ( !all(c(lon_nm, lat_nm) %in% names(df))) {
stop(df_nm, " does not contain columns ", lon_nm, " and ", lat_nm,
". Specify with arguments `lon` and `lat`.", call. = FALSE)
}
nrows1 <- nrow(df)
# Remove rows with NA values
df <- df[!is.na(df[[value_nm]]), ]
if ( nrows1 !=  nrow(df) ){
warning(nrows1 - nrow(df), " NAs detected in ", value_nm, ". Rows with NAs removed.", call. = FALSE)
}
# Add geohash (length 5 is 4.89km x 4.89km; length 6 is 1.22 x 0.61km; length 7 is 153m x 153m; length 8 is 38m x 19m)
df[["geohash"]] <- geohashTools::gh_encode(latitude = df[[lat_nm]],
longitude = df[[lon_nm]],
precision = gh_precision)
# Determine lower bound for concentration (based on circles around 1000 highest sums insured)
# This only works with some relatively high sums insured
if ( is.null(lowerbound) ){
lowerbound_1 <- lower_bound_fn(df, value_nm,
lat_nm = lat_nm,
lon_nm = lon_nm,
radius = radius,
highest = 1000)
}
portfolio_dt <- data.table::data.table(df)
# Calculate total sum insured per geohash
gh_sum <- portfolio_dt[, .(gh_self_sum = sum(get(value_nm))), by = geohash]
# Determine 8 neighbors of geohash and calculate total sum insured for the 9 geohashes
gh_sum_nghbrs <- add_gh_nghbrs_sum(gh_sum, "gh_self_sum")
# Find lowerbound for use cases where sum insured is same for all coords
lowerbound_2 <- lower_bound_fn2(gh_sum_nghbrs,
full = portfolio_dt,
col = value_nm,
lat_nm = lat_nm,
lon_nm = lon_nm,
radius = radius)
# Take max of both lowerbounds
lowerbound <- max(lowerbound_1, lowerbound_2)
# Remove geohashes with a total sum insured lower than the lower bound
gh_remaining <- gh_sum_nghbrs[gh_nghbrs_sum >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining <- portfolio_dt[geohash %in% gh_remaining$geohash]
names(pts_remaining)[names(pts_remaining) == value_nm] <- "_sum_insured"
# Determine centre point for each remaining geohash (delta is distance to bound)
gh_center_lst <- geohashTools::gh_decode(gh_remaining$geohash,
include_delta = TRUE)
gh_center <- data.table::as.data.table(gh_center_lst)
# Determine sum of remaining points within bounding box of radius
# around remaining geohashes
bbox_sum <- add_gh_bbox_sum(gh_center,
pts_remaining,
lon_nm = lon_nm,
lat_nm = lat_nm,
radius = radius)
gh_sum_bbox <- cbind(gh_remaining, bbox_sum)
# Remove (again) geohashes with a total sum insured lower than the lower bound
gh_remaining_bbox <- gh_sum_bbox[sum_bbox >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining2 <- portfolio_dt[geohash %in% gh_remaining_bbox$geohash]
# Create grid points in remaining geohashes
gh_grid <- create_grid_points(gh_remaining_bbox, meters = grid_distance)
# Concentration for each grid point
names(pts_remaining)[names(pts_remaining) == lat_nm] <- "lat"
names(pts_remaining)[names(pts_remaining) == lon_nm] <- "lon"
names(pts_remaining2)[names(pts_remaining2) == lat_nm] <- "lat"
names(pts_remaining2)[names(pts_remaining2) == lon_nm] <- "lon"
gh_grid_conc <- concentration(gh_grid,
pts_remaining,
value = `_sum_insured`,
radius = radius,
display_progress = display_progress)
gh_grid_conc_sort <- gh_grid_conc[order(-concentration)]
data.table::setcolorder(gh_grid_conc_sort, c("concentration", "lon", "lat", "geohash"))
attr(gh_grid_conc_sort, "value_nm") <- value_nm
attr(gh_grid_conc_sort, "pts_remaining") <- pts_remaining2
attr(gh_grid_conc_sort, "gh_remaining") <- gh_remaining_bbox
attr(gh_grid_conc_sort, "radius") <- radius
class(gh_grid_conc_sort) <- append("concentration", class(gh_grid_conc_sort))
return(gh_grid_conc_sort)
}
highest_concentration(Groningen)
devtools::document()
highest_concentration(Groningen)
#'
#' # Create map with geohashes above the lowerbound
#' # The highest concentration lies in one of the geohashes
#' plot(hc1)
#'
#' # Create map with highest concentration
#' plot(hc1_nghb)
#' }
#'
#' @export
highest_concentration <- function(df, value, lon = lon, lat = lat,
lowerbound = NULL, radius = 200,
grid_distance = 20, gh_precision = 6,
display_progress = TRUE){
value_nm <- deparse(substitute(value))
lon_nm <- deparse(substitute(lon))
lat_nm <- deparse(substitute(lat))
df_nm <- deparse(substitute(df))
if ( !all(c(value_nm) %in% names(df))) {
stop(df_nm, " does not contain column specified in `value`. Specify with argument `value`.",
call. = FALSE)
}
if ( !all(c(lon_nm, lat_nm) %in% names(df))) {
stop(df_nm, " does not contain columns ", lon_nm, " and ", lat_nm,
". Specify with arguments `lon` and `lat`.", call. = FALSE)
}
nrows1 <- nrow(df)
# Remove rows with NA values
df <- df[!is.na(df[[value_nm]]), ]
if ( nrows1 !=  nrow(df) ){
warning(nrows1 - nrow(df), " NAs detected in ", value_nm, ". Rows with NAs removed.", call. = FALSE)
}
# Add geohash (length 5 is 4.89km x 4.89km; length 6 is 1.22 x 0.61km; length 7 is 153m x 153m; length 8 is 38m x 19m)
df[["geohash"]] <- geohashTools::gh_encode(latitude = df[[lat_nm]],
longitude = df[[lon_nm]],
precision = gh_precision)
# Determine lower bound for concentration (based on circles around 1000 highest sums insured)
# This only works with some relatively high sums insured
if ( is.null(lowerbound) ){
lowerbound_1 <- lower_bound_fn(df, value_nm,
lat_nm = lat_nm,
lon_nm = lon_nm,
radius = radius,
highest = 1000)
}
portfolio_dt <- data.table::data.table(df)
# Calculate total sum insured per geohash
gh_sum <- portfolio_dt[, .(gh_self_sum = sum(get(value_nm))), by = geohash]
# Determine 8 neighbors of geohash and calculate total sum insured for the 9 geohashes
gh_sum_nghbrs <- add_gh_nghbrs_sum(gh_sum, "gh_self_sum")
# Find lowerbound for use cases where sum insured is same for all coords
lowerbound_2 <- lower_bound_fn2(gh_sum_nghbrs,
full = portfolio_dt,
col = value_nm,
lat_nm = lat_nm,
lon_nm = lon_nm,
radius = radius)
# Take max of both lowerbounds
lowerbound <- max(lowerbound_1, lowerbound_2)
# Remove geohashes with a total sum insured lower than the lower bound
gh_remaining <- gh_sum_nghbrs[gh_nghbrs_sum >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining <- portfolio_dt[geohash %in% gh_remaining$geohash]
names(pts_remaining)[names(pts_remaining) == value_nm] <- "_sum_insured"
# Determine centre point for each remaining geohash (delta is distance to bound)
gh_center_lst <- geohashTools::gh_decode(gh_remaining$geohash,
include_delta = TRUE)
gh_center <- data.table::as.data.table(gh_center_lst)
# Determine sum of remaining points within bounding box of radius
# around remaining geohashes
bbox_sum <- add_gh_bbox_sum(gh_center,
pts_remaining,
lon_nm = lon_nm,
lat_nm = lat_nm,
radius = radius)
gh_sum_bbox <- cbind(gh_remaining, bbox_sum)
# Remove (again) geohashes with a total sum insured lower than the lower bound
gh_remaining_bbox <- gh_sum_bbox[sum_bbox >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining2 <- portfolio_dt[geohash %in% gh_remaining_bbox$geohash]
# Create grid points in remaining geohashes
gh_grid <- create_grid_points(gh_remaining_bbox, meters = grid_distance)
# Concentration for each grid point
names(pts_remaining)[names(pts_remaining) == lat_nm] <- "lat"
names(pts_remaining)[names(pts_remaining) == lon_nm] <- "lon"
names(pts_remaining2)[names(pts_remaining2) == lat_nm] <- "lat"
names(pts_remaining2)[names(pts_remaining2) == lon_nm] <- "lon"
gh_grid_conc <- concentration(gh_grid,
pts_remaining,
value = `_sum_insured`,
radius = radius,
display_progress = display_progress)
gh_grid_conc_sort <- gh_grid_conc[order(-concentration)]
data.table::setcolorder(gh_grid_conc_sort, c("concentration", "lon", "lat", "geohash"))
attr(gh_grid_conc_sort, "value_nm") <- value_nm
attr(gh_grid_conc_sort, "pts_remaining") <- pts_remaining2
attr(gh_grid_conc_sort, "gh_remaining") <- gh_remaining_bbox
attr(gh_grid_conc_sort, "radius") <- radius
class(gh_grid_conc_sort) <- append("concentration", class(gh_grid_conc_sort))
return(gh_grid_conc_sort)
}
highest_concentration(Groningen)
highest_concentration(Groningen, "a")
highest_concentration(Groningen, amount)
highest_concentration(Groningen, "amount")
library(datapasta)
install.packages("datapasta")
x <- data.frame(
stringsAsFactors = FALSE,
Date.........Result = c("2018-11-23   a",
"2018-11-23   a","2018-11-23   b","2018-11-24   c",
"2018-11-24   b","2018-11-25   c","2018-11-25   c",
"2018-11-25   b","2018-11-26   c","2018-11-26   b",
"2018-11-26   a")
)
x
x <- data.frame(
stringsAsFactors = FALSE,
Date.........Result = c("2018-11-23   a",
"2018-11-23   a",
"2018-11-23   b",
"2018-11-24   c",
"2018-11-24   b",
"2018-11-25   c",
"2018-11-25   c",
"2018-11-25   b",
"2018-11-26   c",
"2018-11-26   b",
"2018-11-26   a")
)
x <- data.frame(
date = c("2018-11-23", "2018-11-23", "2018-11-23", "2018-11-24", "2018-11-24",
"2018-11-25", "2018-11-25", "2018-11-25", "2018-11-26", "2018-11-26", "2018-11-26"),
letter = c("a", "a", "b", "c", "b", "c", "c", "b", "c", "b", "a")
)
dput(x)
x <- data.frame(
date = c("2018-11-23", "2018-11-23", "2018-11-23", "2018-11-24", "2018-11-24",
"2018-11-25", "2018-11-25", "2018-11-25", "2018-11-26", "2018-11-26", "2018-11-26"),
letter = c("a", "a", "b", "c", "b", "c", "c", "b", "c", "b", "a")
) %>%
mutate(date = ymd(date))
x
glimpse(x)
dput(x)
x <- structure(list(date = structure(c(17858, 17858, 17858, 17859,
17859, 17860, 17860, 17860, 17861, 17861, 17861), class = "Date"),
letter = c("a", "a", "b", "c", "b", "c", "c", "b", "c", "b",
"a")), class = "data.frame", row.names = c(NA, -11L))
x
library(dplyr)
x %>%
group_by(date) %>%
summarize(count = n()) %>%
ungroup()
x %>%
group_by(date, letter) %>%
summarize(count = n()) %>%
ungroup()
x %>%
group_by(date, letter) %>%
summarize(count = n()) %>%
ungroup() %>%
spread(letter, count)
library(tidyr)
x %>%
group_by(date, letter) %>%
summarize(count = n()) %>%
ungroup() %>%
spread(letter, count)
reprex:::reprex_addin()
x %>%
group_by(date, letter) %>%
summarize(count = n()) %>%
ungroup()
ggplot(data = agg_x, aes(x = date, y = count, color = letter)) +
geom_point() +
geom_line()
agg_x <- x %>%
group_by(date, letter) %>%
summarize(count = n()) %>%
ungroup()
agg_x %>%
spread(letter, count)
ggplot(data = agg_x, aes(x = date, y = count, color = letter)) +
geom_point() +
geom_line()
reprex:::reprex_addin()
reprex:::reprex_addin()
df_have <- data.frame(ID   = c(418, 418, 418),
Date = c("1/01/2020", "1/01/2020","1/01/2020"),
Priority = c(1, 1, 1),
Revenue = c(-866, -866, -866),
Code = c("A", "AB", "A"),
V1 = c("XX3", "XX2", "XX3"),
V2 = c("XX1", "XX2", "XX1"),
V3 = c("XX3", "XX3", "XX3"))
df_have <- data.frame(ID   = c(418, 418, 418),
Date = c("1/01/2020", "1/01/2020","1/01/2020"),
Priority = c(1, 1, 1),
Revenue = c(-866, -866, -866),
Code = c("A", "AB", "A"),
V1 = c("XX3", "XX2", "XX3"),
V2 = c("XX1", "XX2", "XX1"),
V3 = c("XX3", "XX3", "XX3"))
hierarchy <- c("B", "BA", "AB", "A", "C")
# Hierarchy of combinations
hierarchy <- c("B", "BA", "AB", "A", "C")
df_have %>%
mutate(Code = factor(Code, levels = hierarchy)) %>%
arrange(ID, Date, Priority, Revenue, Code)
df_have %>%
mutate(Code = factor(Code, levels = hierarchy)) %>%
arrange(ID, Date, Priority, Revenue, Code) %>%
distinct(ID, Date, Priority, Revenue, .keep_all = TRUE)
reprex:::reprex_addin()
