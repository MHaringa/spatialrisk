geom_sf(data = circle2)
ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = circle)
ggmap(island) +
geom_sf(data = circle)
meuse_bbox <- st_bbox(circle2)
ggmap(island) +
geom_sf(data = circle) +
coord_sf(xlim = c(meuse_bbox["xmin"] - .1 * (meuse_bbox["xmax"]-meuse_bbox["xmin"]),
meuse_bbox["xmax"] + .1 * (meuse_bbox["xmax"]-meuse_bbox["xmin"])),
ylim = c(meuse_bbox["ymin"] - .1 * (meuse_bbox["ymax"]-meuse_bbox["ymin"]),
meuse_bbox["ymax"] + .1 * (meuse_bbox["ymax"]-meuse_bbox["ymin"])))
ggmap(island) +
geom_sf(data = stores)
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000") +
geom_sf(data = data_sf)
data = data.frame(
ID = as.numeric(c(1:8)),
longitude = as.numeric(c(-63.27462, -63.26499, -63.25658, -63.2519, -63.2311, -63.2175, -63.23623, -63.25958)),
latitude = as.numeric(c(17.6328, 17.64614, 17.64755, 17.64632, 17.64888, 17.63113, 17.61252, 17.62463))
)
data_sf <- st_as_sf(data, coords = c("longitude", "latitude"), crs = 3857)
data_sf
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000") +
geom_sf(data = data_sf)
data_sf <- st_as_sf(data, coords = c("longitude", "latitude"), crs = 4326)
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000") +
geom_sf(data = data_sf)
library(sf)
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000") +
geom_sf(data = data_sf)
ggmap(island, extent = "panel", legend = "bottomright") +
#geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000") +
geom_sf(data = data_sf)
data = data.frame(
ID = as.numeric(c(1:8)),
longitude = as.numeric(c(-63.27462, -63.26499, -63.25658, -63.2519, -63.2311, -63.2175, -63.23623, -63.25958)),
latitude = as.numeric(c(17.6328, 17.64614, 17.64755, 17.64632, 17.64888, 17.63113, 17.61252, 17.62463))
)
data_sf <- st_as_sf(data, coords = c("longitude", "latitude"), crs = 4326)
data_sf
ggmap(island, extent = "panel", legend = "bottomright") +
#geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000") +
geom_sf(data = data_sf)
ggplot() +
geom_sf(data = data_sf)
ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = data_sf) +
coord_sf(crs = st_crs(4326))
data_sf
data
data_sf
ggplot() +
geom_sf(data = circle2, inherit.aes = FALSE)
ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = data_sf, inherit.aes = FALSE) #+
ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = data_sf, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326))
data_sf <- st_as_sf(data, coords = c("longitude", "latitude"), crs = 4326)
data_sf
ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = data_sf, color = "red", inherit.aes = FALSE)
points_sf <- st_as_sf(data, coords = c("longitude", "latitude"), crs = 4326)
punten <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE)
punten
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE)
data_sf <- st_sfc(st_multipoint(cbind(data$longitude, data$latitude)), crs = 4326)
data_sf <- st_sfc(st_multipoint(cbind(data$longitude, data$latitude)), crs = 4326)
data_sf_utm <- st_transform(data_sf, "+proj=utm +zone=18")
circle <- sf::st_buffer(data_sf_utm, rad_200m)
circle
map_points +
geom_sf(data = circle)
map_points +
geom_sf(data = circle, inherit.aes = FALSE)
map_points +
geom_sf(data = circle, alpha = 0, inherit.aes = FALSE)
map_points +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
x <- st_buffer(points_sf, rad_200m)
circle <- sf::st_buffer(data_sf_utm, 200)
map_points +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
# Create data
data = data.frame(
ID = 1:8,
longitude = c(-63.27462, -63.26499, -63.25658, -63.2519,
-63.2311, -63.2175, -63.23623, -63.25958),
latitude = c(17.6328, 17.64614, 17.64755, 17.64632,
17.64888, 17.63113, 17.61252, 17.62463)
)
map_points
# Create island
island <- get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 14, maptype = "satellite")
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE)
map_points
map_points +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
circle <- sf::st_buffer(data_sf_utm, 450)
map_points +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
# For this example I will use UTM zone 20, which contains the above points:
data_sf <- st_sfc(st_multipoint(cbind(data$longitude, data$latitude)), crs = 4326)
data_sf_utm <- st_transform(data_sf, "+proj=utm +zone=20")
circle <- sf::st_buffer(data_sf_utm, 450)
map_points +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
map_points +
ggplot() +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
ggplot() +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
circle
stores_utm_column <- st_cast(circle, "POLYGON")
stores_utm_column
ggplot() +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
ggplot() +
geom_sf(data = stores_utm_column, color = "red", alpha = 0, inherit.aes = FALSE)
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = stores_utm_column, color = "red", alpha = 0, inherit.aes = FALSE)
map_points
data_sf_utm <- st_transform(points_sf, "+proj=utm +zone=20")
# Now we can buffer the point representing ourself by 100 meters to produce a circle with radius 100 meters
circle <- sf::st_buffer(data_sf_utm, 450)
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = stores_utm_column, color = "red", alpha = 0, inherit.aes = FALSE)
map_points
# Create data
data <- data.frame(
ID = 1:8,
longitude = c(-63.27462, -63.26499, -63.25658, -63.2519,
-63.2311, -63.2175, -63.23623, -63.25958),
latitude = c(17.6328, 17.64614, 17.64755, 17.64632,
17.64888, 17.63113, 17.61252, 17.62463)
)
# Create sf object with points
points_sf <- st_as_sf(data, coords = c("longitude", "latitude"), crs = 4326)
# For this example we use UTM zone 20, which contains the above points:
data_sf_utm <- st_transform(points_sf, "+proj=utm +zone=20")
# Now we can buffer the point representing ourself by 100 meters to produce a circle with radius 100 meters
circle <- sf::st_buffer(data_sf_utm, 450)
# Create island
island <- get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 14, maptype = "satellite")
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = stores_utm_column, color = "red", alpha = 0, inherit.aes = FALSE)
map_points
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = stores_utm_column, color = "red", alpha = 0.2, inherit.aes = FALSE)
map_points
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = stores_utm_column, color = "red", alpha = 0, inherit.aes = FALSE)
map_points
?st_buffer
# Now we can buffer the point representing ourself by 100 meters to produce a circle with radius 100 meters
circle <- sf::st_buffer(data_sf_utm, 450, joinStyle = "MITRE")
# Create island
island <- get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 14, maptype = "satellite")
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = stores_utm_column, color = "red", alpha = 0, inherit.aes = FALSE)
map_points
# Now we can buffer the point representing ourself by 100 meters to produce a circle with radius 100 meters
circle <- sf::st_buffer(data_sf_utm, 450, joinStyle = "BEVEL")
# Create island
island <- get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 14, maptype = "satellite")
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = stores_utm_column, color = "red", alpha = 0, inherit.aes = FALSE)
map_points
?st_buffer
# Now we can buffer the point by 450 meters
circle <- sf::st_buffer(data_sf_utm, dist = 450)
# Create island
island <- get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 14, maptype = "satellite")
# Create map with island and points
map_points <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = stores_utm_column, color = "red", alpha = 0, inherit.aes = FALSE)
map_points
map_points
reprex:::reprex_addin()
# Create island
island <- ggmap::get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 14, maptype = "satellite")
reprex:::reprex_addin()
reprex:::reprex_addin()
# Create map with island and points
ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
# Create data
data <- data.frame(
ID = 1:8,
longitude = c(-63.27462, -63.26499, -63.25658, -63.2519,
-63.2311, -63.2175, -63.23623, -63.25958),
latitude = c(17.6328, 17.64614, 17.64755, 17.64632,
17.64888, 17.63113, 17.61252, 17.62463)
)
# Create sf object with points
points_sf <- sf::st_as_sf(data, coords = c("longitude", "latitude"), crs = 4326)
# For this example we use UTM zone 20, which contains the island
data_sf_utm <- sf::st_transform(points_sf, "+proj=utm +zone=20")
# Now we can buffer the point by 450 meters
circle <- sf::st_buffer(data_sf_utm, dist = 450)
# Create island
island <- ggmap::get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 14, maptype = "satellite")
# Create map with island and points
ggmap(island, extent = "panel", legend = "bottomright") +
geom_sf(data = points_sf, color = "red", inherit.aes = FALSE) +
geom_sf(data = circle, color = "red", alpha = 0, inherit.aes = FALSE)
reprex:::reprex_addin()
?st_as_sf
library(spatialrisk)
points_in_circle(Groningen, lon_center = 6.571561, lat_center = 53.21326, radius = 50)
?points_in_circle
library(spatialrisk)
points_in_circle(Groningen, lon_center = 6.571561, lat_center = 53.21326, radius = 100)
library(spatialrisk)
circle <- (points_in_circle(Groningen, lon_center = 6.571561, lat_center = 53.21326, radius = 100))
library(spatialrisk)
circle <- (points_in_circle(Groningen, lon_center = 6.571561, lat_center = 53.21326, radius = 100))
library(spatialrisk)
circle <- points_in_circle(Groningen, lon_center = 6.571561, lat_center = 53.21326, radius = 100)
circle
sum(circle$amound)
sum(circle$amount)
df <- data.frame(location = c("p1", "p2", "p3"),
lon = c(6.561561, 6.561398, 6.571561),
lat = c(53.21369, 53.21326, 53.21326))
concentration(df, Groningen, value = amount, radius = 100)
conc <- concentration(df, Groningen, value = amount, radius = 100)
conc
is.equal(sum(circle$amount) == conc$concentration[3])
sum(circle$amount) == conc$concentration[3]
isTRUE(sum(circle$amount) == conc$concentration[3])
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
.Last.error.trace
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
install.packages(c("bayestestR", "broom", "ciTools", "data.table", "digest", "Formula", "insight", "labeling", "lme4", "nlme", "reticulate", "rmarkdown", "spelling", "statmod"))
devtools::document()
pkgdown::build_site()
.Last.error.trace
library(callr)
library(pkgdown)
library(pkgdown)
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
usethis::edit_r_profile()
pkgdown::build_site()
.Last.error.trace
library(spatialrisk)
points_in_circle(Groningen, lon_center = 6.571561, lat_center = 53.21326, radius = 50)
Groningen
install.packages("googlePolylines")
knmi_historic_data(2015, 2019)
spatialrisk::knmi_historic_data(2015, 2019)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
vignette("Rcpp-package")
library(Rcpp)
evalCpp("1+1")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
library(Rcpp)
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
?haversine
??haversine
haversine(53.24007, 6.520386, 53.24054, 6.520386)
haversine_cpp_vec(53.24007, 6.520386, 53.24054, 6.520386)
haversine_cpp_vec(53.24007, 6.520386, 53.24054, 6.520386, 6378137)
cheap_dist_euclidean(53.24007, 6.520386, 53.24054, 6.520386)
cheap_dist_euclidean(c(53.24007, 53.24007), c(6.520386, 6.520386),
c(53.24054, 53.24054), c(6.520386, 6.520386))
sourceCpp("src/haversine_cpp.cpp")
haversine_cpp_vec(53.24007, 6.520386, 53.24054, 6.520386, 6378137)
cheap_dist_euclidean_vec(53.24007, 6.520386, 53.24054, 6.520386)
cheap_dist_euclidean_vec(c(53.24007, 53.24007), c(6.520386, 6.520386),
c(53.24054, 53.24054), c(6.520386, 6.520386))
Groningen
spatialrisk::Groningen
library(dplyr)
df <- spatialrisk::Groningen %>%
mutate(lon1 = lon - 1, lat = lat + 1)
df <- spatialrisk::Groningen %>%
mutate(lon1 = lon - 1, lat1 = lat + 1)
haversine_cpp_vec(df$lon, df$lat, df$lon1, df$lat1)
haversine_cpp_vec(df$lon, df$lat, df$lon1, df$lat1, 6378137)
df1 <- df %>%
mutate(dist_hav = haversine_cpp_vec(df$lon, df$lat, df$lon1, df$lat1, 6378137)) %>%
mutate(dist_cheap = cheap_dist_euclidean_vec(df$lon, df$lat, df$lon1, df$lat1))
df1
df <- spatialrisk::Groningen %>%
mutate(lon1 = lon - .1, lat1 = lat + .01)
df1 <- df %>%
mutate(dist_hav = haversine_cpp_vec(df$lon, df$lat, df$lon1, df$lat1, 6378137)) %>%
mutate(dist_cheap = cheap_dist_euclidean_vec(df$lon, df$lat, df$lon1, df$lat1))
df1
df <- spatialrisk::Groningen %>%
mutate(lon1 = lon - .01, lat1 = lat + .01)
df1 <- df %>%
mutate(dist_hav = haversine_cpp_vec(df$lon, df$lat, df$lon1, df$lat1, 6378137)) %>%
mutate(dist_cheap = cheap_dist_euclidean_vec(df$lon, df$lat, df$lon1, df$lat1))
df1
df <- spatialrisk::Groningen %>%
mutate(lon1 = lon - .01, lat1 = lat)
df1 <- df %>%
mutate(dist_hav = haversine_cpp_vec(df$lon, df$lat, df$lon1, df$lat1, 6378137)) %>%
mutate(dist_cheap = cheap_dist_euclidean_vec(df$lon, df$lat, df$lon1, df$lat1))
df1
microbenchmark::microbenchmark(
dist_hav = haversine_cpp_vec(df$lon, df$lat, df$lon1, df$lat1, 6378137),
dist_cheap = cheap_dist_euclidean_vec(df$lon, df$lat, df$lon1, df$lat1),
times = 1
)
microbenchmark::microbenchmark(
dist_hav = haversine_cpp_vec(df$lon, df$lat, df$lon1, df$lat1, 6378137),
dist_cheap = cheap_dist_euclidean_vec(df$lon, df$lat, df$lon1, df$lat1),
times = 10
)
microbenchmark::microbenchmark(
dist_hav = haversine_cpp_vec(df$lon, df$lat, df$lon1, df$lat1, 6378137),
dist_cheap = cheap_dist_euclidean_vec(df$lon, df$lat, df$lon1, df$lat1),
times = 100
)
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
sourceCpp("src/haversine_cpp.cpp")
#' Given two points of the form lat, lon, returns the distance in meters.
#' Very fast approximations to common geodesic measurements. Useful for performance-sensitive code that measures things on a city scale.
#' @keywords internal
cheap_dist_euclidean <- function(lat_from, lon_from, lat_to, lon_to){
# https://blog.mapbox.com/fast-geodesic-approximations-with-cheap-ruler-106f229ad016
dy <- 20004 * abs(lat_from - lat_to) * 0.005555556 # i.e. 1/180 (multiplication is faster than division)
dx <- 40008 * abs(lon_from - lon_to) * 0.002777778 * cos(.5 * (lat_from + lat_to)) # i.e. 1/360
d <- sqrt(dx ^ 2 + dy ^ 2) * 1000
return(d)
}
microbenchmark::microbenchmark(
haversine(53.24007, 6.520386, 53.24054, 6.520386),
cheap_dist_euclidean(53.24007, 6.520386, 53.24054, 6.520386),
times = 1000
)
library(spatialrisk)
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
#'     5 is 4.89 x 4.89km; 6 is 1.22km x 0.61km; 7 is 153m x 153m; 8 is 39m x 19m. Defaults to 6. Precision level
#'     of 6 must be used for a radius of 200m.
#'
#' @import data.table
#' @import geohashTools
#'
#' @return data.frame
#' @examples
#'
#' @export
highest_concentration <- function(df, value, lon = lon, lat = lat, lowerbound = NULL, radius = 200, grid_distance = 20,
gh_precision = 6, display_progress = TRUE){
value_nm <- deparse(substitute(value))
lon_nm <- deparse(substitute(lon))
lat_nm <- deparse(substitute(lat))
# Add geohash (length 5 is 4.89km x 4.89km; length 6 is 1.22 x 0.61km; length 7 is 153m x 153m; length 8 is 38m x 19m)
df[["hash"]] <- geohashTools::gh_encode(latitude = df[[lat_nm]],
longitude = df[[lon_nm]],
precision = gh_precision)
# Determine lower bound for concentration (based on circles around 1000 highest sums insured)
if ( is.null(lowerbound) ){
lowerbound <- lower_bound_fn(df, value_nm, highest = 1000)
}
portfolio_dt <- data.table::data.table(df)
# Calculate total sum insured per geohash
gh_sum <- portfolio_dt[, .(gh_self_sum = sum(get(value_nm))), by = hash]
# Determine 8 neighbors of geohash and calculate total sum insured for the 9 hashes
gh_sum_nghbrs <- add_gh_nghbrs_sum(gh_sum, "gh_self_sum")
# Remove geohashes with a total sum insured lower than the lower bound
gh_remaining <- gh_sum_nghbrs[gh_nghbrs_sum >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining <- portfolio_dt[hash %in% gh_remaining$hash]
names(pts_remaining)[names(pts_remaining) == value_nm] <- "_sum_insured"
# Determine centre point for each remaining geohash (delta is distance to bound)
gh_center_lst <- geohashTools::gh_decode(gh_remaining$hash,
include_delta = TRUE)
gh_center <- data.table::as.data.table(gh_center_lst)
# Determine sum of remaining points within bounding box of radius
# around remaining geohashes
bbox_sum <- add_gh_bbox_sum(gh_center, pts_remaining, radius = radius)
gh_sum_bbox <- cbind(gh_remaining, bbox_sum)
# Remove (again) geohashes with a total sum insured lower than the lower bound
gh_remaining_bbox <- gh_sum_bbox[sum_bbox >= lowerbound]
# Create grid points in remaining geohashes
gh_grid <- create_grid_points(gh_remaining_bbox, meters = grid_distance)
# Concentration for each grid point
gh_grid_conc <- concentration(gh_grid, pts_remaining, `_sum_insured`,
radius = radius,
display_progress = display_progress)
}
library(spatialrisk)
Rcpp::sourceCpp("~/Dropbox/Werk/AAV/Concentratierisico/spatialrisk/src/haversine_cpp.cpp")
highest_concentration(concentratie, sum_net_facul_reinsurance) %>%
arrange(desc(concentration))
library(dplyr)
highest_concentration(concentratie, sum_net_facul_reinsurance) %>%
arrange(desc(concentration))
install.packages(c("bslib", "class", "dplyr", "ggiraph", "gt", "httpuv", "insight", "magick", "MASS", "Matrix", "nnet", "renv", "reprex", "rlang", "rmdformats", "sass", "sfsmisc", "spaMM", "spatial", "spdep", "styler", "systemfonts", "tcl", "textshaping"))
#'
#' @import data.table
#' @import geohashTools
#'
#' @author Martin Haringa
#'
#' @return data.frame
#' @examples
#'
#' @export
highest_concentration <- function(df, value, lon = lon, lat = lat, lowerbound = NULL, radius = 200, grid_distance = 20,
gh_precision = 6, display_progress = TRUE){
value_nm <- deparse(substitute(value))
lon_nm <- deparse(substitute(lon))
lat_nm <- deparse(substitute(lat))
# Add geohash (length 5 is 4.89km x 4.89km; length 6 is 1.22 x 0.61km; length 7 is 153m x 153m; length 8 is 38m x 19m)
df[["hash"]] <- geohashTools::gh_encode(latitude = df[[lat_nm]],
longitude = df[[lon_nm]],
precision = gh_precision)
# Determine lower bound for concentration (based on circles around 1000 highest sums insured)
if ( is.null(lowerbound) ){
lowerbound <- lower_bound_fn(df, value_nm, highest = 1000)
}
portfolio_dt <- data.table::data.table(df)
# Calculate total sum insured per geohash
gh_sum <- portfolio_dt[, .(gh_self_sum = sum(get(value_nm))), by = hash]
# Determine 8 neighbors of geohash and calculate total sum insured for the 9 hashes
gh_sum_nghbrs <- add_gh_nghbrs_sum(gh_sum, "gh_self_sum")
# Remove geohashes with a total sum insured lower than the lower bound
gh_remaining <- gh_sum_nghbrs[gh_nghbrs_sum >= lowerbound]
# Coordinates or remaining points in portfolio within remaining geohashes
pts_remaining <- portfolio_dt[hash %in% gh_remaining$hash]
names(pts_remaining)[names(pts_remaining) == value_nm] <- "_sum_insured"
# Determine centre point for each remaining geohash (delta is distance to bound)
gh_center_lst <- geohashTools::gh_decode(gh_remaining$hash,
include_delta = TRUE)
gh_center <- data.table::as.data.table(gh_center_lst)
# Determine sum of remaining points within bounding box of radius
# around remaining geohashes
bbox_sum <- add_gh_bbox_sum(gh_center, pts_remaining, radius = radius)
gh_sum_bbox <- cbind(gh_remaining, bbox_sum)
# Remove (again) geohashes with a total sum insured lower than the lower bound
gh_remaining_bbox <- gh_sum_bbox[sum_bbox >= lowerbound]
# Create grid points in remaining geohashes
gh_grid <- create_grid_points(gh_remaining_bbox, meters = grid_distance)
# Concentration for each grid point
gh_grid_conc <- concentration(gh_grid, pts_remaining, `_sum_insured`,
radius = radius,
display_progress = display_progress)
gh_grid_conc[order(concentration)]
}
