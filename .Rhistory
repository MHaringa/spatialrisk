decimal.mark=".", big.mark=" "),
" (", circle_sf[["idrow"]], ")"),
fillColor = pal_circles(circle_sf[["highest_concentration"]]),
labelOptions = labelOptions(noHide = T, textsize = "15px"),
stroke = TRUE,
weight = 1,
group = "Circle") %>%
# Overlay groups with geohashes
leaflet::addRectangles(lng1 = gh_center$west,
lat1 = gh_center$south,
lng2 = gh_center$east,
lat2 = gh_center$north,
label = gh_center$geohash,
opacity = 1,
weight = 2,
fillOpacity = 0,
group = "Geohash") %>%
# Overlay groups with points
leaflet::addCircleMarkers(data = pts_sf,
color = pal_points(pts_sf[[value_nm]]),
stroke = TRUE,
popup = popuptxt,
group = "Points") %>%
leaflet::addLegend(data = pts_sf,
pal = pal_points,
title = value_nm,
values = pts_sf[[value_nm]],
position = legend_position,
group = "Points") %>%
leafem::addMouseCoordinates() %>%
# Layers control
leaflet::addLayersControl(
baseGroups = c("Positron (default)", "OSM", "Toner Lite"),
overlayGroups = c("Points", "Circle", "Geohash"),
options = leaflet::layersControlOptions(collapsed = FALSE)
) %>%
leaflet::hideGroup("Geohash")
if ( nrow(circle_sf) > 1 ){
m <- m %>%
leaflet::addLegend(data = circle_sf,
pal = pal_circles,
title = legend_title_circle,
position = legend_position_circle,
values = circle_sf[["highest_concentration"]],
group = "Circle")
}
m
}
plot(x)
haav <- highest_concentration(concentratie, sum_net_facul_reinsurance, grid_distance = 50)
plot(haav)
haav <- highest_concentration(concentratie, sum_net_facul_reinsurance, grid_distance = 50)
plot(haav)
haav <- highest_concentration(concentratie, sum_net_facul_reinsurance, grid_distance = 50)
haav <- highest_concentration(concentratie, sum_net_facul_reinsurance, grid_distance = 50, display_progress = FALSE)
haav <- highest_concentration(concentratie, sum_net_facul_reinsurance, grid_distance = 20, display_progress = TRUE)
concentratie <- concentratie %>%
mutate(test = 1)
haav <- highest_concentration(concentratie, test, grid_distance = 50, display_progress = TRUE)
concentratie
concentratie <- concentratie %>%
sample_n(100000) %>%
mutate(test = 1)
haav <- highest_concentration(concentratie, test, grid_distance = 50, display_progress = TRUE)
plot(haav)
Rcpp::sourceCpp("~/Dropbox/Werk/AAV/Concentratierisico/testcpp.cpp")
library(Rcpp)
Rcpp::sourceCpp("~/Dropbox/Werk/AAV/Concentratierisico/testcpp.cpp")
Rcpp::sourceCpp("~/Dropbox/Werk/AAV/Concentratierisico/spatialrisk/src/testcpp.cpp")
Rcpp::sourceCpp("~/Dropbox/Werk/AAV/Concentratierisico/spatialrisk/src/testcpp.cpp")
Rcpp::sourceCpp("~/Dropbox/Werk/AAV/Concentratierisico/spatialrisk/src/testcpp.cpp")
concentration <- function(sub, full, value,
lon_sub = lon, lat_sub = lat,
lon_full = lon, lat_full = lat,
radius = 200, display_progress = TRUE){
if( radius < 0 ){ stop('radius should be positive') }
# Turn into character vector
sub_name <- deparse(substitute(sub))
full_name <- deparse(substitute(full))
lon_sub <- deparse(substitute(lon_sub))
lat_sub <- deparse(substitute(lat_sub))
lon_full <- deparse(substitute(lon_full))
lat_full <- deparse(substitute(lat_full))
value <- deparse(substitute(value))
if ( !all(c(lon_sub, lat_sub) %in% names(sub))) {
stop(paste0(sub_name, " does not contain columns ", lon_sub, " and ", lat_sub), call. = FALSE)
}
if ( !all(c(lon_full, lat_full) %in% names(full))) {
stop(paste0(full_name, " does not contain columns ", lon_full, " and ", lat_full), call. = FALSE)
}
if ( !all(is.numeric(c(sub[[lon_sub]], sub[[lat_sub]], full[[lon_full]], full[[lat_full]], full[[value]]))) ){
stop(paste0("the following variables should be numeric: ", lon_sub, ", ", lat_sub, ", ", lon_full, ", ", lat_full, ", ", value), call. = FALSE)
}
sub_df <- data.frame("lon" = sub[[lon_sub]], "lat" = sub[[lat_sub]])
full_df <- data.frame("lon" = full[[lon_full]], "lat" = full[[lat_full]], "value" = full[[value]])
concentration_df <- concentration_loop_cpp(sub_df, full_df, radius, display_progress)
sub$concentration <- concentration_df$cumulation
return(sub)
}
concentration2 <- function(sub, full, value,
lon_sub = lon, lat_sub = lat,
lon_full = lon, lat_full = lat,
radius = 200, display_progress = TRUE){
if( radius < 0 ){ stop('radius should be positive') }
# Turn into character vector
sub_name <- deparse(substitute(sub))
full_name <- deparse(substitute(full))
lon_sub <- deparse(substitute(lon_sub))
lat_sub <- deparse(substitute(lat_sub))
lon_full <- deparse(substitute(lon_full))
lat_full <- deparse(substitute(lat_full))
value <- deparse(substitute(value))
if ( !all(c(lon_sub, lat_sub) %in% names(sub))) {
stop(paste0(sub_name, " does not contain columns ", lon_sub, " and ", lat_sub), call. = FALSE)
}
if ( !all(c(lon_full, lat_full) %in% names(full))) {
stop(paste0(full_name, " does not contain columns ", lon_full, " and ", lat_full), call. = FALSE)
}
if ( !all(is.numeric(c(sub[[lon_sub]], sub[[lat_sub]], full[[lon_full]], full[[lat_full]], full[[value]]))) ){
stop(paste0("the following variables should be numeric: ", lon_sub, ", ", lat_sub, ", ", lon_full, ", ", lat_full, ", ", value), call. = FALSE)
}
sub_df <- data.frame("lon" = sub[[lon_sub]], "lat" = sub[[lat_sub]])
full_df <- data.frame("lon" = full[[lon_full]], "lat" = full[[lat_full]], "value" = full[[value]])
concentration_df <- concentration_loop_cpp2(sub_df, full_df, radius, display_progress)
sub$concentration <- concentration_df$cumulation
return(sub)
}
concentration(insurance, insurance, amount)
concentration1 <- function(sub, full, value,
lon_sub = lon, lat_sub = lat,
lon_full = lon, lat_full = lat,
radius = 200, display_progress = TRUE){
if( radius < 0 ){ stop('radius should be positive') }
# Turn into character vector
sub_name <- deparse(substitute(sub))
full_name <- deparse(substitute(full))
lon_sub <- deparse(substitute(lon_sub))
lat_sub <- deparse(substitute(lat_sub))
lon_full <- deparse(substitute(lon_full))
lat_full <- deparse(substitute(lat_full))
value <- deparse(substitute(value))
if ( !all(c(lon_sub, lat_sub) %in% names(sub))) {
stop(paste0(sub_name, " does not contain columns ", lon_sub, " and ", lat_sub), call. = FALSE)
}
if ( !all(c(lon_full, lat_full) %in% names(full))) {
stop(paste0(full_name, " does not contain columns ", lon_full, " and ", lat_full), call. = FALSE)
}
if ( !all(is.numeric(c(sub[[lon_sub]], sub[[lat_sub]], full[[lon_full]], full[[lat_full]], full[[value]]))) ){
stop(paste0("the following variables should be numeric: ", lon_sub, ", ", lat_sub, ", ", lon_full, ", ", lat_full, ", ", value), call. = FALSE)
}
sub_df <- data.frame("lon" = sub[[lon_sub]], "lat" = sub[[lat_sub]])
full_df <- data.frame("lon" = full[[lon_full]], "lat" = full[[lat_full]], "value" = full[[value]])
concentration_df <- concentration_loop_cpp(sub_df, full_df, radius, display_progress)
sub$concentration <- concentration_df$cumulation
return(sub)
}
concentration2 <- function(sub, full, value,
lon_sub = lon, lat_sub = lat,
lon_full = lon, lat_full = lat,
radius = 200, display_progress = TRUE){
if( radius < 0 ){ stop('radius should be positive') }
# Turn into character vector
sub_name <- deparse(substitute(sub))
full_name <- deparse(substitute(full))
lon_sub <- deparse(substitute(lon_sub))
lat_sub <- deparse(substitute(lat_sub))
lon_full <- deparse(substitute(lon_full))
lat_full <- deparse(substitute(lat_full))
value <- deparse(substitute(value))
if ( !all(c(lon_sub, lat_sub) %in% names(sub))) {
stop(paste0(sub_name, " does not contain columns ", lon_sub, " and ", lat_sub), call. = FALSE)
}
if ( !all(c(lon_full, lat_full) %in% names(full))) {
stop(paste0(full_name, " does not contain columns ", lon_full, " and ", lat_full), call. = FALSE)
}
if ( !all(is.numeric(c(sub[[lon_sub]], sub[[lat_sub]], full[[lon_full]], full[[lat_full]], full[[value]]))) ){
stop(paste0("the following variables should be numeric: ", lon_sub, ", ", lat_sub, ", ", lon_full, ", ", lat_full, ", ", value), call. = FALSE)
}
sub_df <- data.frame("lon" = sub[[lon_sub]], "lat" = sub[[lat_sub]])
full_df <- data.frame("lon" = full[[lon_full]], "lat" = full[[lat_full]], "value" = full[[value]])
concentration_df <- concentration_loop_cpp2(sub_df, full_df, radius, display_progress)
sub$concentration <- concentration_df$cumulation
return(sub)
}
concentration1(insurance, insurance, amount)
concentration2(insurance, insurance, amount)
microbenchmark::microbenchmark(
concentration1(insurance, insurance, amount),
concentration2(insurance, insurance, amount),
times = 2
)
DataFrame NDF = DataFrame::create(Named("id") = id_sub,
Named("cumulation") = cumulation);
return(NDF);
}
Rcpp::sourceCpp("~/Dropbox/Werk/AAV/Concentratierisico/spatialrisk/src/testcpp.cpp")
microbenchmark::microbenchmark(
concentration1(insurance, insurance, amount),
concentration2(insurance, insurance, amount),
times = 2
)
Rcpp::sourceCpp("~/Dropbox/Werk/AAV/Concentratierisico/spatialrisk/src/testcpp.cpp")
microbenchmark::microbenchmark(
concentration1(insurance, insurance, amount),
concentration2(insurance, insurance, amount),
times = 2
)
Rcpp::sourceCpp("~/Dropbox/Werk/AAV/Concentratierisico/spatialrisk/src/testcpp.cpp")
microbenchmark::microbenchmark(
concentration1(insurance, insurance, amount),
concentration2(insurance, insurance, amount),
times = 2
)
concentration1(insurance %>% sample_n(100), insurance, amount)
concentration1(insurance %>% sample_n(1e2), insurance, amount)
concentration1(insurance %>% sample_n(1e3), insurance, amount)
microbenchmark::microbenchmark(
concentration1(insurance %>% sample_n(1e2), insurance, amount),
concentration1(insurance %>% sample_n(1e3), insurance, amount),
concentration1(insurance %>% sample_n(1e4), insurance, amount),
concentration1(insurance %>% sample_n(1e5), insurance, amount)
)
microbenchmark::microbenchmark(
concentration1(insurance %>% sample_n(1e2), insurance, amount),
concentration1(insurance %>% sample_n(1e3), insurance, amount),
concentration1(insurance %>% sample_n(1e4), insurance, amount),
)
microbenchmark::microbenchmark(
concentration1(insurance %>% sample_n(1e2), insurance, amount),
concentration1(insurance %>% sample_n(1e3), insurance, amount),
concentration1(insurance %>% sample_n(1e4), insurance, amount),
times = 2
)
devtools::document()
devtools::document()
plot_points(Groningen, value = amount)
hconc <- highest_concentration(Groningen, amount, radius = 200, grid_distance = 50, display_progress = FALSE)
head(hconc)
plot(hconc)
plot(hconc) %>% leaflet::setView(lng = 6.5, lat = 53.2, zoom = 13)
plot(hconc) %>% leaflet::setView(lng = 6.7, lat = 53.2, zoom = 13)
plot(hconc) %>% leaflet::setView(lng = 6.55, lat = 53.2, zoom = 13)
plot(hconc) %>% leaflet::setView(lng = 6.55, lat = 53.22, zoom = 13)
plot(hconc) %>% leaflet::setView(lng = 6.55, lat = 53.22, zoom = 12)
plot(hconc) %>% leaflet::setView(lng = 6.55, lat = 53.22, zoom = 13)
plot(hconc)
plot(hconc) %>% leaflet::setView(lng = 6.55, lat = 53.22, zoom = 13)
hconc_nghb <- neighborhood_gh_search(hconc, max.call = 7000)
hconc_nghb <- neighborhood_gh_search(hconc, max.call = 7000, verbose = FALSE)
hconc_nghb
plot(hconc_nghb)
plot(hconc_nghb)
neighborhood_gh_search(hconc, max.call = 7000, highest_geohash = 3) %>%
plot()
plot(hconc_nghb)
#' @importFrom leafgl addGlPoints
#' @importFrom leaflet addLegend
#' @importFrom leaflet addLayersControl
#' @importFrom leafem addMouseCoordinates
#'
#' @examples \dontrun{
#' plot_points(Groningen, value = amount)
#' }
#'
#' @export
plot_points <- function(df, value, lon = lon, lat = lat, palette = "viridis",
legend_position = "bottomleft", crs = 4326){
value_nm <- deparse(substitute(value))
lon_nm <- deparse(substitute(lon))
lat_nm <- deparse(substitute(lat))
df_nm <- deparse(substitute(df))
if ( value_nm == ""){
stop(df_nm, " does not contain column specified in `value`. Specify with argument `value`.",
call. = FALSE)
}
obj_sf <- sf::st_as_sf(df, coords = c(lon_nm, lat_nm), crs = crs)
cols <- colourvalues::colour_values(obj_sf[[value_nm]], palette = palette)
qpal <- leaflet::colorNumeric(palette, obj_sf[[value_nm]])
leaflet::leaflet() %>%
# Base groups
leaflet::addTiles(group = "OSM") %>%
leaflet::addProviderTiles(providers$CartoDB.Positron, group = "Positron (default)") %>%
leaflet::addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
# Overlay groups
leafgl::addGlPoints(data = obj_sf,
fillColor = cols,
popup = TRUE,
group = "Points") %>%
leaflet::addLegend(data = obj_sf,
pal = qpal,
title = value_nm,
values = obj_sf[[value_nm]],
position = legend_position,
group = "Points") %>%
leafem::addMouseCoordinates() %>%
# Layers control
leaflet::addLayersControl(
baseGroups = c("Positron (default)", "OSM", "Toner Lite"),
overlayGroups = c("Points"),
options = layersControlOptions(collapsed = FALSE)
)
}
plot(Groningen, amount)
Groningen
plot(Groningen, amount)
plot_points(Groningen, amount)
#' @importFrom leafgl addGlPoints
#' @importFrom leaflet addLegend
#' @importFrom leaflet addLayersControl
#' @importFrom leafem addMouseCoordinates
#'
#' @examples \dontrun{
#' plot_points(Groningen, value = amount)
#' }
#'
#' @export
plot_points <- function(df, value, lon = lon, lat = lat, palette = "viridis",
legend_position = "bottomleft", crs = 4326){
value_nm <- deparse(substitute(value))
lon_nm <- deparse(substitute(lon))
lat_nm <- deparse(substitute(lat))
df_nm <- deparse(substitute(df))
if ( value_nm == ""){
stop(df_nm, " does not contain column specified in `value`. Specify with argument `value`.",
call. = FALSE)
}
obj_sf <- sf::st_as_sf(df, coords = c(lon_nm, lat_nm), crs = crs)
cols <- colourvalues::colour_values(obj_sf[[value_nm]], palette = palette)
qpal <- leaflet::colorNumeric(palette, obj_sf[[value_nm]])
leaflet::leaflet() %>%
# Base groups
leaflet::addTiles(group = "OSM") %>%
leaflet::addProviderTiles(providers$CartoDB.Positron, group = "Positron (default)") %>%
leaflet::addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
# Overlay groups
leafgl::addGlPoints(data = obj_sf,
fillColor = cols,
popup = TRUE,
group = "Points") %>%
leaflet::addLegend(data = obj_sf,
pal = qpal,
title = value_nm,
values = obj_sf[[value_nm]],
position = legend_position,
group = "Points") %>%
leafem::addMouseCoordinates() %>%
# Layers control
leaflet::addLayersControl(
baseGroups = c("Positron (default)", "OSM", "Toner Lite"),
overlayGroups = c("Points"),
options = layersControlOptions(collapsed = FALSE)
)
}
plot_points(Groningen, amount)
library(spatialrisk)
library(spatialrisk)
plot_points(Groningen, value = amount)
hconc <- highest_concentration(Groningen, amount, radius = 200, grid_distance = 50)
hconc <- highest_concentration(Groningen, amount, radius = 200, grid_distance = 50, display_progress = FALSE)
microbenchmark::microbenchmark(
highest_concentration(Groningen, amount, radius = 200, grid_distance = 50, display_progress = FALSE),
times = 10)
microbenchmark::microbenchmark(
highest_concentration(Groningen, amount, radius = 200, grid_distance = 25, display_progress = FALSE),
times = 10)
head(hconc)
plot(hconc)
hconc_nghb <- neighborhood_gh_search(hconc, max.call = 7000)
plot(hconc) %>% leaflet::setView(lng = 6.55, lat = 53.22, zoom = 13)
remotes::install_github("rstudio/webshot2")
plot_points(Groningen, value = amount) %>% webshot2::webshot()
plot_points(Groningen, value = amount) %>% webshot2::webshot(file = "man/figures/pts_groningen.png")
plot_points(Groningen, value = amount) %>% webshot2::webshot(file = "~/man/figures/pts_groningen.png")
getwd()
webshot2::webshot(plot_points(Groningen, value = amount), file = "~/man/figures/pts_groningen.png")
webshot2::webshot(plot_points(Groningen, value = amount))
webshot2::webshot(plot_points(Groningen, value = amount), file = paste0(getwd(), "/map.png"))
m <- plot_points(Groningen, value = amount)
webshot2::webshot(m, file = paste0(getwd(), "/map.png"))
getwd()
webshot::webshot(m, file = paste0(getwd(), "/map.png"))
paste0(getwd(), "/map.png")
getwd()
m
webshot2::webshot(m)
?webshot2::webshot()
options(viewer = NULL) # view in browser
m <- plot_points(Groningen, value = amount)
m
webshot2::webshot(m)
plot_points(Groningen, value = amount)
webshot2::webshot("http://localhost:13142/session/viewhtmld98e2970d64/index.html", "pts_groningen.png")
webshot2::webshot("http://localhost:13142/session/viewhtmld98e2970d64/index.html", "pts_groningen.png", delay = 5)
plot_points(Groningen, value = amount)
plot_points(Groningen, value = amount)
plot(hconc)
plot(hconc)
plot(hconc_nghb)
neighborhood_gh_search(hconc, max.call = 7000, highest_geohash = 3) %>%
plot()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::release()
insurance
validUTF8(insurance$postcode)
validUTF8(insurance$postcode) == FALSE
sum(validUTF8(insurance$postcode) == FALSE)
Groningen
sum(validUTF8(Groningen$street) == FALSE)
spatialrisk::nl_corop
sum(validUTF8(nl_corop$areaname) == FALSE)
nl_postcode2
nl_postcode3
nl_postcode4
sum(validUTF8(nl_postcode4$areaname) == FALSE)
sum(validUTF8(nl_provincie$areaname) == FALSE)
sum(validUTF8(nl_corop$areaname) == FALSE)
sum(validUTF8(knmi_stations$areaname) == FALSE)
knmi_stations
sum(validUTF8(knmi_stations$city) == FALSE)
nl_gemeente
sum(validUTF8(nl_gemeente$areaname) == FALSE)
showNonASCII(nl_gemeente$areaname)
devtools::release()
devtools::check_rhub()
devtools::document()
pkgdown::build_site()
devtools::check_rhub()
plot_points(Groningen, value = amount)
Groningen1 <- Groningen %>%
rename(amount1 = amount, lon1 = lon, lat1 = lat)
plot_points(Groningen1, value = amount1)
plot_points(Groningen1, value = amount1, lon = lon1, lat = lat1)
plot_points(Groningen, value = amount)
# Plot
hconc <- highest_concentration(Groningen, value = amount, grid_distance = 50)
hconc
plot(hconc)
plot(hconc)
#
n1 <- neighborhood_gh_search(hconc, highest_geohash = 1)
plot(n1)
#
n1 <- neighborhood_gh_search(hconc, highest_geohash = 2)
plot(n1)
# Find objects within radius
points_in_circle(Groningen, lon_center = 6.547372, lat_center = 53.23650)
# Find objects within radius
points_in_circle(Groningen, lon_center = 6.547372, lat_center = 53.23650) %>%
plot_points()
# Find objects within radius
points_in_circle(Groningen, lon_center = 6.547372, lat_center = 53.23650) %>%
plot_points(value = amount)
# Find objects within radius
obj <- points_in_circle(Groningen, lon_center = 6.547372, lat_center = 53.23650)
obj
# Create plot
plot_points(obj, value = amount)
#
n1 <- neighborhood_gh_search(hconc, highest_geohash = 2)
plot(n1)
# Plot
hconc <- highest_concentration(Groningen, value = amount, grid_distance = 50)
plot(hconc)
# Plot highest concentrations
hconc <- highest_concentration(Groningen, value = amount, grid_distance = 50)
plot(hconc)
?spatialrisk::neighborhood_gh_search()
# Plot points
plot_points(Groningen, value = amount)
# Plot highest concentrations
hconc <- highest_concentration(Groningen, value = amount, grid_distance = 50)
plot(hconc)
# Look for higher concentrations in neighborhood of grid points
n2 <- neighborhood_gh_search(hconc, highest_geohash = 2)
plot(n2)
plot(n2)
plot(hconc)
?highest_concentration
?neighborhood_gh_search
nb3 <- neighborhood_gh_search(hconc, max.call = 7000, highest_geohash = 3)
plot(nb3)
nb3
points_in_circle(Groningen, lon_center = nb3$lon[1], lat_center = nb4$lat[1], radius = 200)
points_in_circle(Groningen, lon_center = nb3$lon[1], lat_center = nb3$lat[1], radius = 200)
nb3
# Plot highest concentrations
hconc <- highest_concentration(insurance, value = amount, grid_distance = 50)
plot(hconc)
# Look for higher concentrations in neighborhood of grid points
n2 <- neighborhood_gh_search(hconc, highest_geohash = 2)
plot(n2)
max(insurance$amount)
# Plot highest concentrations
hconc <- highest_concentration(insurance, value = amount, grid_distance = 50, lowerbound = 10e6)
library(spatialrisk)
# Plot highest concentrations
hconc <- highest_concentration(insurance, value = amount, grid_distance = 50, lowerbound = 10e6)
plot(hconc)
pkgdown::build_site()
choropleth(gemeente_sf, mode = "plot", legend_title = "Sum insured (EUR)", n = 5)
gemeente_sf <- points_to_polygon(nl_gemeente, insurance, sum(amount, na.rm = TRUE))
choropleth(gemeente_sf, mode = "plot", legend_title = "Sum insured (EUR)", n = 5)
choropleth(gemeente_sf, mode = "plot", legend_title = "Sum insured (EUR)", n = 5)
devtools::document()
pkgdown::build_site()
devtools::check_rhub()
# Look for higher concentrations in neighborhood of grid points
n2 <- neighborhood_gh_search(hconc, highest_geohash = 1, max.call = 100000)
devtools::release()
