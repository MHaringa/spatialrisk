pts_lst <- vector("list", nrow(hc))
for ( i in 1:nrow(hc)){
pts_lst[[i]] <- points_in_circle(pts0,
lon_center = hc$lon[i],
lat_center = hc$lat[i],
radius = radius + 200)
}
pts <- do.call(rbind, pts_lst)
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
print(pts)
circle_sf <- hc %>%
sf::st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
sf::st_transform(3035) %>%
sf::st_buffer(dist = units::set_units(radius, "meters")) %>%
sf::st_transform(4326) %>%
sf::st_geometry()
mapview(pts_sf, zcol = "valueconc") + mapview(circle_df, col.regions = "red")
#mapview::mapview(list(pts_sf, circle_sf), col.regions = c("skyblue", "red"), zcol = "valueconc")
}
f2(hc1_nghb)
f2 <- function(hc, zcol = NULL){
pts0 <- attr(hc, "pts_remaining")
radius <- attr(hc, "radius")
pts_lst <- vector("list", nrow(hc))
for ( i in 1:nrow(hc)){
pts_lst[[i]] <- points_in_circle(pts0,
lon_center = hc$lon[i],
lat_center = hc$lat[i],
radius = radius + 200)
}
pts <- do.call(rbind, pts_lst)
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
print(pts)
circle_sf <- hc %>%
sf::st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
sf::st_transform(3035) %>%
sf::st_buffer(dist = units::set_units(radius, "meters")) %>%
sf::st_transform(4326) %>%
sf::st_geometry()
mapview::mapview(pts_sf, zcol = "valueconc") + mapview::mapview(circle_df, col.regions = "red")
#mapview::mapview(list(pts_sf, circle_sf), col.regions = c("skyblue", "red"), zcol = "valueconc")
}
f2(hc1_nghb)
f2 <- function(hc, zcol = NULL){
pts0 <- attr(hc, "pts_remaining")
radius <- attr(hc, "radius")
pts_lst <- vector("list", nrow(hc))
for ( i in 1:nrow(hc)){
pts_lst[[i]] <- points_in_circle(pts0,
lon_center = hc$lon[i],
lat_center = hc$lat[i],
radius = radius + 200)
}
pts <- do.call(rbind, pts_lst)
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
print(pts)
circle_sf <- hc %>%
sf::st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
sf::st_transform(3035) %>%
sf::st_buffer(dist = units::set_units(radius, "meters")) %>%
sf::st_transform(4326) %>%
sf::st_geometry()
mapview::mapview(pts_sf, zcol = "valueconc") + mapview::mapview(circle_sf, col.regions = "red")
#mapview::mapview(list(pts_sf, circle_sf), col.regions = c("skyblue", "red"), zcol = "valueconc")
}
f2(hc1_nghb)
hc1
hc1[["points_remaining"]]
str(h1)
str(hc1)
attr(hc1, "points_remaining")
# Find highest concentration with a precision of a grid of 20 meters
hc1 <- highest_concentration(Groningen, amount, radius = 200, grid_distance = 20)
str(hc1)
attr(hc1, "pts_remaining")
#' hc2 <- highest_concentration(Groningen, amount, radius = 200, grid_distance = 10)
#'
#' # Increase the number of calls to the concentration function for more extensive search
#' hc1_nghb <- neighborhood_gh_search(hc1, max.call = 7000)
#' hc2_nghb <- neighborhood_gh_search(hc2, max.call = 7000)
#' print(hc1_nghb)
#' print(hc2_nghb)
#' }
#'
#' @export
neighborhood_gh_search <- function(hc, highest_geohash = 1, max.call = 1000, verbose = TRUE){
if( !inherits(hc, c("concentration")) ) {
stop("Input must be of class concentration. Use highest_concentration() first.", call. = FALSE)
}
value_nm <- attr(hc, "value_nm")
pts_remaining <- attr(hc, "pts_remaining")
radius <- attr(hc, "radius")
names(pts_remaining)[names(pts_remaining) == value_nm] <- "valueconc"
geohash <- unique(hc$geohash)[1:highest_geohash]
# Function to minimize
csa <- function(x){
df <- data.frame(lon = x[1], lat = x[2])
-concentration(df, pts_remaining, valueconc, display_progress = FALSE)$concentration[1]
}
gsa_lst <- vector("list", length(geohash))
for (i in 1:length(geohash)){
hash_dec <- geohashTools::gh_decode(geohash[i], include_delta = TRUE)
lat_begin <- hash_dec$latitude - hash_dec$delta_latitude
lat_end <- hash_dec$latitude + hash_dec$delta_latitude
lon_begin <- hash_dec$longitude - hash_dec$delta_longitude
lon_end <- hash_dec$longitude + hash_dec$delta_longitude
# Lower and upper bounds for neighborhood search
lower <- c(lon_begin, lat_begin)
upper <- c(lon_end, lat_end)
# Generate coordinates
sa <- GenSA::GenSA(lower = lower, upper = upper,
fn = csa,
control = list(verbose = verbose,
max.call = max.call))
df <- data.frame(highest_concentration = -sa$value, lon = sa$par[1], lat = sa$par[2],
geohash = geohash[i])
gsa_lst[[i]] <- df
}
dc <- do.call(rbind, gsa_lst)
attr(dc, "pts_remaining") <- pts_remaining
attr(dc, "radius") <- radius
return(dc)
}
# Increase the number of calls to the concentration function for more extensive search
hc1_nghb <- neighborhood_gh_search(hc1, max.call = 1000)
str(hc1)
str(hc2)
f2 <- function(hc, zcol = NULL){
pts0 <- attr(hc, "pts_remaining")
radius <- attr(hc, "radius")
print(pts0)
pts_lst <- vector("list", nrow(hc))
for ( i in 1:nrow(hc)){
pts_lst[[i]] <- points_in_circle(pts0,
lon_center = hc$lon[i],
lat_center = hc$lat[i],
radius = radius + 200)
}
pts <- do.call(rbind, pts_lst)
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
print(pts)
circle_sf <- hc %>%
sf::st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
sf::st_transform(3035) %>%
sf::st_buffer(dist = units::set_units(radius, "meters")) %>%
sf::st_transform(4326) %>%
sf::st_geometry()
mapview::mapview(pts_sf, zcol = "valueconc") + mapview::mapview(circle_sf, col.regions = "red")
#mapview::mapview(list(pts_sf, circle_sf), col.regions = c("skyblue", "red"), zcol = "valueconc")
}
f2(hc1_nghb)
f2 <- function(hc, zcol = NULL){
pts0 <- attr(hc, "pts_remaining")
radius <- attr(hc, "radius")
print(pts0)
pts_lst <- vector("list", nrow(hc))
for ( i in 1:nrow(hc)){
pts_lst[[i]] <- points_in_circle(pts0,
lon_center = hc$lon[i],
lat_center = hc$lat[i],
radius = radius + 200)
}
pts <- do.call(rbind, pts_lst)
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
print(pts)
circle_sf <- hc %>%
sf::st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
sf::st_transform(3035) %>%
sf::st_buffer(dist = units::set_units(radius, "meters")) %>%
sf::st_transform(4326) %>%
sf::st_geometry()
mapview::mapview(pts_sf, zcol = "valueconc") + mapview::mapview(circle_sf, col.regions = "red")
#mapview::mapview(list(pts_sf, circle_sf), col.regions = c("skyblue", "red"), zcol = "valueconc")
}
f2(hc1_nghb)
str(hc1_nghb)
# Increase the number of calls to the concentration function for more extensive search
hc1_nghb <- neighborhood_gh_search(hc1, max.call = 1000)
hc1_nghb
str(hc1_nghb)
#' hc2 <- highest_concentration(Groningen, amount, radius = 200, grid_distance = 10)
#'
#' # Increase the number of calls to the concentration function for more extensive search
#' hc1_nghb <- neighborhood_gh_search(hc1, max.call = 7000)
#' hc2_nghb <- neighborhood_gh_search(hc2, max.call = 7000)
#' print(hc1_nghb)
#' print(hc2_nghb)
#' }
#'
#' @export
neighborhood_gh_search <- function(hc, highest_geohash = 1, max.call = 1000, verbose = TRUE){
if( !inherits(hc, c("concentration")) ) {
stop("Input must be of class concentration. Use highest_concentration() first.", call. = FALSE)
}
value_nm <- attr(hc, "value_nm")
pts_remaining <- attr(hc, "pts_remaining")
radius <- attr(hc, "radius")
names(pts_remaining)[names(pts_remaining) == value_nm] <- "valueconc"
geohash <- unique(hc$geohash)[1:highest_geohash]
# Function to minimize
csa <- function(x){
df <- data.frame(lon = x[1], lat = x[2])
-concentration(df, pts_remaining, valueconc, display_progress = FALSE)$concentration[1]
}
gsa_lst <- vector("list", length(geohash))
for (i in 1:length(geohash)){
hash_dec <- geohashTools::gh_decode(geohash[i], include_delta = TRUE)
lat_begin <- hash_dec$latitude - hash_dec$delta_latitude
lat_end <- hash_dec$latitude + hash_dec$delta_latitude
lon_begin <- hash_dec$longitude - hash_dec$delta_longitude
lon_end <- hash_dec$longitude + hash_dec$delta_longitude
# Lower and upper bounds for neighborhood search
lower <- c(lon_begin, lat_begin)
upper <- c(lon_end, lat_end)
# Generate coordinates
sa <- GenSA::GenSA(lower = lower, upper = upper,
fn = csa,
control = list(verbose = verbose,
max.call = max.call))
df <- data.frame(highest_concentration = -sa$value, lon = sa$par[1], lat = sa$par[2],
geohash = geohash[i])
gsa_lst[[i]] <- df
}
dc <- do.call(rbind, gsa_lst)
attr(dc, "pts_remaining") <- pts_remaining
print(pts_remaining)
attr(dc, "radius") <- radius
return(dc)
}
# Increase the number of calls to the concentration function for more extensive search
hc1_nghb <- neighborhood_gh_search(hc1, max.call = 1000)
#' hc2 <- highest_concentration(Groningen, amount, radius = 200, grid_distance = 10)
#'
#' # Increase the number of calls to the concentration function for more extensive search
#' hc1_nghb <- neighborhood_gh_search(hc1, max.call = 7000)
#' hc2_nghb <- neighborhood_gh_search(hc2, max.call = 7000)
#' print(hc1_nghb)
#' print(hc2_nghb)
#' }
#'
#' @export
neighborhood_gh_search <- function(hc, highest_geohash = 1, max.call = 1000, verbose = TRUE){
if( !inherits(hc, c("concentration")) ) {
stop("Input must be of class concentration. Use highest_concentration() first.", call. = FALSE)
}
value_nm <- attr(hc, "value_nm")
pts_remaining <- attr(hc, "pts_remaining")
radius <- attr(hc, "radius")
names(pts_remaining)[names(pts_remaining) == value_nm] <- "valueconc"
geohash <- unique(hc$geohash)[1:highest_geohash]
# Function to minimize
csa <- function(x){
df <- data.frame(lon = x[1], lat = x[2])
-concentration(df, pts_remaining, valueconc, display_progress = FALSE)$concentration[1]
}
gsa_lst <- vector("list", length(geohash))
for (i in 1:length(geohash)){
hash_dec <- geohashTools::gh_decode(geohash[i], include_delta = TRUE)
lat_begin <- hash_dec$latitude - hash_dec$delta_latitude
lat_end <- hash_dec$latitude + hash_dec$delta_latitude
lon_begin <- hash_dec$longitude - hash_dec$delta_longitude
lon_end <- hash_dec$longitude + hash_dec$delta_longitude
# Lower and upper bounds for neighborhood search
lower <- c(lon_begin, lat_begin)
upper <- c(lon_end, lat_end)
# Generate coordinates
sa <- GenSA::GenSA(lower = lower, upper = upper,
fn = csa,
control = list(verbose = verbose,
max.call = max.call))
df <- data.frame(highest_concentration = -sa$value, lon = sa$par[1], lat = sa$par[2],
geohash = geohash[i])
gsa_lst[[i]] <- df
}
names(pts_remaining)[names(pts_remaining) == "valueconc"] <- value_nm
dc <- do.call(rbind, gsa_lst)
attr(dc, "pts_remaining") <- pts_remaining
attr(dc, "radius") <- radius
return(dc)
}
# Find highest concentration with a precision of a grid of 20 meters
hc1 <- highest_concentration(Groningen, amount, radius = 200, grid_distance = 20)
# Increase the number of calls to the concentration function for more extensive search
hc1_nghb <- neighborhood_gh_search(hc1, max.call = 1000)
str(hc1)
str(hc2)
f1(hc1)
f2(hc1_nghb)
f2 <- function(hc, zcol = NULL){
pts0 <- attr(hc, "pts_remaining")
radius <- attr(hc, "radius")
pts_lst <- vector("list", nrow(hc))
for ( i in 1:nrow(hc)){
pts_lst[[i]] <- points_in_circle(pts0,
lon_center = hc$lon[i],
lat_center = hc$lat[i],
radius = radius + 200)
}
pts <- do.call(rbind, pts_lst)
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
circle_sf <- hc %>%
sf::st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
sf::st_transform(3035) %>%
sf::st_buffer(dist = units::set_units(radius, "meters")) %>%
sf::st_transform(4326) %>%
sf::st_geometry()
mapview::mapview(pts_sf, zcol = "amount") + mapview::mapview(circle_sf, col.regions = "red")
}
f2(hc1_nghb)
f1(hc1)
f1 <- function(hc, zcol = NULL){
pts <- attr(hc, "pts_remaining")
geohashes <- attr(hc, "gh_remaining")
print(geohashes)
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
ne <- geohashes[, .(geohash, lon = east, lat = north)]
nw <- geohashes[, .(geohash, lon = west, lat = north)]
sw <- geohashes[, .(geohash, lon = west, lat = south)]
se <- geohashes[, .(geohash, lon = east, lat = south)]
dir_comb <- rbind(ne, nw, sw, se)
dir_comb_sf <- sf::st_as_sf(dir_comb, coords = c("lon", "lat"), crs = 4326)
rect_sf <- dir_comb_sf %>%
dplyr::group_by(geohash) %>%
dplyr::summarise(geometry = sf::st_combine(geometry)) %>%
sf::st_cast("POLYGON")
# Maak kaart
mapview::mapview(list(points = pts_sf, geohash = rect_sf))
}
f1(hc1)
f1 <- function(hc, zcol = NULL){
pts <- attr(hc, "pts_remaining")
geohashes0 <- attr(hc, "gh_remaining")
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
geohashes <- geohashes0[
, north := latitude + delta_latitude][
, south := latitude - delta_latitude][
, east := longitude + delta_longitude][
, west := longitude - delta_longitude]
ne <- geohashes[, .(geohash, lon = east, lat = north)]
nw <- geohashes[, .(geohash, lon = west, lat = north)]
sw <- geohashes[, .(geohash, lon = west, lat = south)]
se <- geohashes[, .(geohash, lon = east, lat = south)]
dir_comb <- rbind(ne, nw, sw, se)
dir_comb_sf <- sf::st_as_sf(dir_comb, coords = c("lon", "lat"), crs = 4326)
rect_sf <- dir_comb_sf %>%
dplyr::group_by(geohash) %>%
dplyr::summarise(geometry = sf::st_combine(geometry)) %>%
sf::st_cast("POLYGON")
# Maak kaart
mapview::mapview(list(points = pts_sf, geohash = rect_sf))
}
f1(hc1)
f1 <- function(hc, zcol = NULL){
pts <- attr(hc, "pts_remaining")
geohashes0 <- attr(hc, "gh_remaining")
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
geohashes <- geohashes0[
, north := latitude + delta_latitude][
, south := latitude - delta_latitude][
, east := longitude + delta_longitude][
, west := longitude - delta_longitude]
ne <- geohashes[, .(geohash, lon = east, lat = north)]
nw <- geohashes[, .(geohash, lon = west, lat = north)]
sw <- geohashes[, .(geohash, lon = west, lat = south)]
se <- geohashes[, .(geohash, lon = east, lat = south)]
dir_comb <- rbind(ne, nw, sw, se)
dir_comb_sf <- sf::st_as_sf(dir_comb, coords = c("lon", "lat"), crs = 4326)
rect_sf <- dir_comb_sf %>%
dplyr::group_by(geohash) %>%
dplyr::summarise(geometry = sf::st_combine(geometry)) %>%
sf::st_cast("POLYGON")
mapview::mapview(pts_sf, zcol = "amount") + mapview::mapview(rect_sf, col.regions = "skyblue", legend = FALSE)
}
f1(hc1)
f1 <- function(hc, zcol = NULL){
pts <- attr(hc, "pts_remaining")
geohashes0 <- attr(hc, "gh_remaining")
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
geohashes <- geohashes0[
, north := latitude + delta_latitude][
, south := latitude - delta_latitude][
, east := longitude + delta_longitude][
, west := longitude - delta_longitude]
ne <- geohashes[, .(geohash, lon = east, lat = north)]
nw <- geohashes[, .(geohash, lon = west, lat = north)]
sw <- geohashes[, .(geohash, lon = west, lat = south)]
se <- geohashes[, .(geohash, lon = east, lat = south)]
dir_comb <- rbind(ne, nw, sw, se)
dir_comb_sf <- sf::st_as_sf(dir_comb, coords = c("lon", "lat"), crs = 4326)
rect_sf <- dir_comb_sf %>%
dplyr::group_by(geohash) %>%
dplyr::summarise(geometry = sf::st_combine(geometry)) %>%
sf::st_cast("POLYGON")
mapview::mapview(rect_sf, col.regions = "skyblue", legend = FALSE) +  mapview::mapview(pts_sf, zcol = "amount")
}
f1(hc1)
f1 <- function(hc, zcol = NULL){
pts <- attr(hc, "pts_remaining")
geohashes0 <- attr(hc, "gh_remaining")
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
geohashes <- geohashes0[
, north := latitude + delta_latitude][
, south := latitude - delta_latitude][
, east := longitude + delta_longitude][
, west := longitude - delta_longitude]
ne <- geohashes[, .(geohash, lon = east, lat = north)]
nw <- geohashes[, .(geohash, lon = west, lat = north)]
sw <- geohashes[, .(geohash, lon = west, lat = south)]
se <- geohashes[, .(geohash, lon = east, lat = south)]
dir_comb <- rbind(ne, nw, sw, se)
dir_comb_sf <- sf::st_as_sf(dir_comb, coords = c("lon", "lat"), crs = 4326)
rect_sf <- dir_comb_sf %>%
dplyr::group_by(geohash) %>%
dplyr::summarise(geometry = sf::st_combine(geometry)) %>%
sf::st_cast("POLYGON")
mapview::mapview(rect_sf, col.regions = "skyblue", legend = FALSE) +  mapview::mapview(pts_sf, zcol = "amount", alpha = .2)
}
f1(hc1)
f1 <- function(hc, zcol = NULL){
pts <- attr(hc, "pts_remaining")
geohashes0 <- attr(hc, "gh_remaining")
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
geohashes <- geohashes0[
, north := latitude + delta_latitude][
, south := latitude - delta_latitude][
, east := longitude + delta_longitude][
, west := longitude - delta_longitude]
ne <- geohashes[, .(geohash, lon = east, lat = north)]
nw <- geohashes[, .(geohash, lon = west, lat = north)]
sw <- geohashes[, .(geohash, lon = west, lat = south)]
se <- geohashes[, .(geohash, lon = east, lat = south)]
dir_comb <- rbind(ne, nw, sw, se)
dir_comb_sf <- sf::st_as_sf(dir_comb, coords = c("lon", "lat"), crs = 4326)
rect_sf <- dir_comb_sf %>%
dplyr::group_by(geohash) %>%
dplyr::summarise(geometry = sf::st_combine(geometry)) %>%
sf::st_cast("POLYGON")
mapview::mapview(rect_sf, col.regions = "skyblue", legend = FALSE) +  mapview::mapview(pts_sf, zcol = "amount", alpha.regions = .2)
}
f1(hc1)
f1 <- function(hc, zcol = NULL){
pts <- attr(hc, "pts_remaining")
geohashes0 <- attr(hc, "gh_remaining")
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
geohashes <- geohashes0[
, north := latitude + delta_latitude][
, south := latitude - delta_latitude][
, east := longitude + delta_longitude][
, west := longitude - delta_longitude]
ne <- geohashes[, .(geohash, lon = east, lat = north)]
nw <- geohashes[, .(geohash, lon = west, lat = north)]
sw <- geohashes[, .(geohash, lon = west, lat = south)]
se <- geohashes[, .(geohash, lon = east, lat = south)]
dir_comb <- rbind(ne, nw, sw, se)
dir_comb_sf <- sf::st_as_sf(dir_comb, coords = c("lon", "lat"), crs = 4326)
rect_sf <- dir_comb_sf %>%
dplyr::group_by(geohash) %>%
dplyr::summarise(geometry = sf::st_combine(geometry)) %>%
sf::st_cast("POLYGON")
mapview::mapview(rect_sf, col.regions = "skyblue", legend = FALSE,
alpha.regions = .2) +  mapview::mapview(pts_sf, zcol = "amount")
}
f1 <- function(hc, zcol = NULL){
pts <- attr(hc, "pts_remaining")
geohashes0 <- attr(hc, "gh_remaining")
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = 4326)
geohashes <- geohashes0[
, north := latitude + delta_latitude][
, south := latitude - delta_latitude][
, east := longitude + delta_longitude][
, west := longitude - delta_longitude]
ne <- geohashes[, .(geohash, lon = east, lat = north)]
nw <- geohashes[, .(geohash, lon = west, lat = north)]
sw <- geohashes[, .(geohash, lon = west, lat = south)]
se <- geohashes[, .(geohash, lon = east, lat = south)]
dir_comb <- rbind(ne, nw, sw, se)
dir_comb_sf <- sf::st_as_sf(dir_comb, coords = c("lon", "lat"), crs = 4326)
rect_sf <- dir_comb_sf %>%
dplyr::group_by(geohash) %>%
dplyr::summarise(geometry = sf::st_combine(geometry)) %>%
sf::st_cast("POLYGON")
mapview::mapview(rect_sf, col.regions = "skyblue", legend = FALSE,
alpha.regions = .2) + mapview::mapview(pts_sf, zcol = "amount")
}
f1(hc1)
mapview::mapview(Groningen_sf, zcol = "amount")
mapview::mapview(Groningen = Groningen_sf, zcol = "amount")
mapview::mapview(list(Groningen = Groningen_sf), zcol = "amount")
mapview::mapview(list(Groningen = Groningen_sf),
zcol = list("Sum insured" = "amount"))
mapview::mapview(Groningen_sf,
zcol = "amount")
mapview::mapview(Groningen_sf,
zcol = "amount",
layer.name = "hoi")
mapview::mapview(Groningen_sf,
zcol = "amount",
layer.name = "Groningen - Sum Insured")
mapview::mapview(Groningen_sf,
zcol = "amount",
layer.name = "Groningen\nSum Insured")
mapview::mapview(Groningen_sf,
zcol = "amount",
layer.name = "Groningen - Sum Insured")
mapview::mapview(Groningen_sf,
zcol = "amount",
layer.name = "Sum Insured (EUR)")
mapview::mapview(Groningen_sf,
zcol = "amount",
layer.name = "Sum insured (EUR)")
library(spatialrisk)
usethis::edit_r_environ()
